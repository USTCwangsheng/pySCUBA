/*
 * savedligpconfig.h
 *
 *  Created on: 2020年10月25日
 *      Author: hyiu
 */

#ifndef SAVEDLIGPCONFIG_H_
#define SAVEDLIGPCONFIG_H_
#include "sampling/ligpepsampler.h"
#include "dstl/nrtopn.h"

namespace NSPsampling {
/**
 * processing saved ligandpep configurations generated by lippepsampler
 *
 * The program readsampledligpep illustrates how to use this class
 */
struct SavedLigPConfig {
	int peplength;
	std::string savedconfigfile; //<* The saved ligandpep configuration file generated by ligpepsampler
	std::shared_ptr<NSPintrct::IntrctMol> imol; //<* host IntrctMol object for the ligandpep, for writing PDB of receptor+ligandpep
	NSPdstl::NRTopN<int> topnconfigs;

	/**
	 * One configuration
	 */
	struct Config {
		std::array<double, NSPintrct::IntrctBlck::ENESIZE> energies;
		double epot_tot, e_contactrest;
		std::vector<NSPgeometry::XYZ> crds;
		int id;
	};

	std::vector<Config> configs;

	double rmsd(const Config & config1, const Config & config2) {
		return LigPConfigRMSD(peplength)(config1.crds, config2.crds);
	}
	struct CompareConfig {
		SavedLigPConfig *slp;
		double operator()(int id1, int id2) const {
			int idoffset = slp->configs[0].id;
			return slp->rmsd(slp->configs[id1 - idoffset],
					slp->configs[id2 - idoffset]);
		}
	};
	void init(LigPSamplerPara &para);
	Config readnextconfig(std::istream &is);
    void readallconfigs();
	 void determinetopn(int n,double rmsdcut);
	 void savenonredundant(const std::string &configfile, const std::string &rmsdenefile,double rmsdcut);
	void writepdb(std::ofstream &ofs, const Config &cf,bool writeene=true); //<*write a PDB file of the complete molecule with given  ligpep configuration
	void writepdb_topn(int n,double rmsdcut);
};
}

#endif /* SAVEDLIGPCONFIG_H_ */
