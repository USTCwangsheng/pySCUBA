/*
 * savedloops.h
 *
 *  Created on: 2019年12月25日
 *      Author: hyiu
 */

#ifndef SAVEDLOOPS_H_
#define SAVEDLOOPS_H_
#include "sampling/loopsampler.h"
#include "dstl/nrtopn.h"
namespace NSPsampling{
/**
 * processing saved loops generated by LoopSampler
 *
 * The program readsampledloops illustrates how to use this class
 */
struct SavedLoops{
	int nloops;
	int nloopatoms;
	int min_nloopatom; // min natom of all loop_region.
	typedef LoopSampler::FlankingSite FlankingSite;
	std::vector<FlankingSite> reindexedflankingsites;
	std::vector<int> looplengths;
	std::vector<std::vector<std::string>> loopsequences; //<* all gly in this implementation
	std::string loopfile; //<* The outloopfile generated by loopsampler
	std::shared_ptr<NSPintrct::IntrctMol> imol; //<* host IntrctMol object for the generated loops
//	typedef NSPdstl::ScoredType<int> ConfigID;
	NSPdstl::NRTopN<int> topnconfigs;


/**
 * One configuration of loops as read from loopfile
 */
	struct Config{
		std::array<double,NSPintrct::IntrctBlck::ENESIZE> energies;
		std::vector<NSPgeometry::XYZ> crds;
		int id;
	};
	static double rmsd(const Config & config1, const Config & config2);
	// PhiPsiRMSD, where N,CA,C,O is in seq{a,b,c,d}.
	static double pprmsd(const Config & config1, const Config & config2, std::vector<int> seq);
	double rmsdcut(double rmsdmin=0.03, double alpha=0.02) const {
		 return rmsdmin+alpha*((double) nloopatoms/4.0-4.0);
	}
	double rmsdcut_de(double denominator, double rmsdmin=0.03, double alpha=0.02) {
		 return rmsdmin+alpha*((double) nloopatoms/(4.0*denominator)-4.0);
	}
	struct CompareConfigPP
	{
	    SavedLoops *slp;
	    // RhiPsiCompare, seq{0,1,2,3} means N, CA, C, O is in 0,1,2,3 sequence.
	    double operator()(int id1, int id2, std::vector<int> seq = {0,1,2,3}) const
	    {
	    	int idoffset=slp->configs[0].id;
			return SavedLoops::pprmsd(slp->configs[id1-idoffset],slp->configs[id2-idoffset], seq);
	    }
	};
	struct CompareConfig{
		    SavedLoops *slp;
		    double operator()(int id1, int id2) const {
		    	int idoffset=slp->configs[0].id;
				return SavedLoops::rmsd(slp->configs[id1-idoffset],slp->configs[id2-idoffset]);
			}
		};
	std::vector<Config> configs;
	Config startconfig;
	Config pdbconfig;
	/**
	 * initialize using the same input controlling parameters for LoopSampler
	 */
	void init(LpSamplerPara &para);
	Config readnextconfig(std::istream &is);
	Config copypdbconfig();
	Config readstartconfig(){
		 std::cout <<"try open startloops.dat"<<std::endl;
		std::ifstream ifs("startloops.dat");
		if(!ifs.is_open()) {
			 std::cout <<"open startloops.dat failed"<<std::endl;
			 exit(1);
		}
		startconfig=readnextconfig(ifs);
		assert(!startconfig.crds.empty());
		return startconfig;
	}

	void readallconfigs();
    void determinetopn(int n,double rmsdcut);
    void determinetopnPP(int n, double rmsdcut); // based on PhiPsi
    void savenonredundant(const std::string &configfile, const std::string &rmsdenefile,double rmsdcut);

	/**
	 * update the loop conformations in imol using configuration i in configs, and write a PDB file
	 */
	void writepdb(std::ofstream &ofs, const Config &cf,bool writeene=true); //<*write a PDB file of the complete molecule with given loop configuration
	void writepdb_topn(int n,double rmsdcut);
	void writermsdene(const std::string & filename);
};



}



#endif /* SAVEDLOOPS_H_ */
