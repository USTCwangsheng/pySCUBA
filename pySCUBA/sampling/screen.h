/*
 * screen.h
 *
 *  Created on: 2021年6月4日
 *      Author: yxchen
 */

#ifndef SAMPLING_SCREEN_H_
#define SAMPLING_SCREEN_H_

#include "iblock/intrctmol.h"
#include "iblock/intrctblck.h"
#include "geometry/xyz.h"
#include <fstream>
#include <sstream>
#include <dirent.h>
#include "proteinrep/aaconformer.h"
#include <cstring>

using namespace std;
using namespace NSPintrct;
using namespace NSPproteinrep;
using namespace NSPgeometry;

/*
 * used for SCUBAHBScreen and SCUBACavityScreen.
 */

namespace Screen
{

struct Region
{
	string cid;
	int rbeg;
	int rend;
};

struct HBPar
{
	vector<string> scaffolds; // all scaffolds
	vector<Region> regions; // all ||  <cid ridstart ridend>
	vector<string> objectpair{"MC","MC"}; // MC || SC || all
	double hb_th = 3.3; // HB threshold
	double expose_th = 0.7; // Expose threshold
	HBPar() {;}
	HBPar(string parfile)
	{
		ifstream ifs;
		ifs.open(parfile.c_str());
		if(!ifs.good())
		{
			cout << "parfile failure" << endl;
			exit(1);
		}
		while(true)
		{
			string line;
			line.clear();
			getline(ifs, line);
			if(!ifs.good()) break;
			if(line.size() == 0) continue;
			vector<string> words;
			stringstream input(line);
			string word;
			while (input>>word) words.push_back(word);
			if (words[0] == "ScaffoldDir" && words.size() == 3)
			{
			    DIR *pDir;
			    struct dirent* ptr;
			    if(!(pDir = opendir(words[2].c_str())))
			        return;
			    while((ptr = readdir(pDir))!=0) {
			        if (strcmp(ptr->d_name, ".") != 0 && strcmp(ptr->d_name, "..") != 0)
			            scaffolds.push_back(words[2] + "/" + ptr->d_name);
			    }
			    closedir(pDir);
			}
			if (words[0] == "Region" && words.size() > 2)
			{
				if (words[2] == "all")
				{
					Region reg;
					reg.cid = "-1";
					reg.rbeg = -1;
					reg.rend = -1;
					regions.push_back(reg);
				}
				else
				{
					assert((words.size()-2) % 3 == 0);
					for (int i = 0; i < (words.size()-2)/3; i++)
					{
						Region reg;
						reg.cid = words[i*3+2];
						reg.rbeg = stoi(words[i*3+3]);
						reg.rend = stoi(words[i*3+4]);
						regions.push_back(reg);
					}
				}
			}
			if (words[0] == "ObjectPair")
			{
				if (words.size() != 4)
				{
					cout << "ObjectPair should have two inputs." << endl;
					exit(1);
				}
				objectpair[0] = words[2];
				objectpair[1] = words[3];
			}
			if (words[0] == "HB_th" && words.size() == 3)
				hb_th = stod(words[2]);
			if (words[0] == "Expose_th" && words.size() == 3)
				expose_th = stod(words[2]);
		}
	}
};

struct Atom
{
	string cid;
	int rid;
	string aname;
	Atom() {;}
	Atom(string c, int r, string a)
	{
		cid = c;
		rid = r;
		aname = a;
	}
};

struct SpherePoints
{
	vector<XYZ> points = {XYZ{0.045,-0.234,-2.689},
			XYZ{-0.411,0.031,-2.668},
			XYZ{-0.119,0.517,-2.647},
			XYZ{0.452,0.434,-2.626},
			XYZ{0.704,-0.092,-2.605},
			XYZ{0.467,-0.628,-2.584},
			XYZ{-0.080,-0.846,-2.563},
			XYZ{-0.636,-0.652,-2.542},
			XYZ{-0.955,-0.154,-2.521},
			XYZ{-0.923,0.436,-2.500},
			XYZ{-0.567,0.909,-2.479},
			XYZ{-0.012,1.118,-2.457},
			XYZ{0.571,1.014,-2.436},
			XYZ{1.027,0.634,-2.415},
			XYZ{1.246,0.082,-2.394},
			XYZ{1.183,-0.509,-2.373},
			XYZ{0.861,-1.008,-2.352},
			XYZ{0.353,-1.316,-2.331},
			XYZ{-0.238,-1.378,-2.310},
			XYZ{-0.802,-1.187,-2.289},
			XYZ{-1.239,-0.784,-2.268},
			XYZ{-1.479,-0.239,-2.246},
			XYZ{-1.487,0.356,-2.225},
			XYZ{-1.267,0.909,-2.204},
			XYZ{-0.855,1.339,-2.183},
			XYZ{-0.314,1.586,-2.162},
			XYZ{0.281,1.621,-2.141},
			XYZ{0.849,1.441,-2.120},
			XYZ{1.317,1.073,-2.099},
			XYZ{1.629,0.565,-2.078},
			XYZ{1.749,-0.018,-2.057},
			XYZ{1.666,-0.608,-2.036},
			XYZ{1.392,-1.137,-2.014},
			XYZ{0.960,-1.548,-1.993},
			XYZ{0.418,-1.796,-1.972},
			XYZ{-0.174,-1.858,-1.951},
			XYZ{-0.757,-1.730,-1.930},
			XYZ{-1.270,-1.426,-1.909},
			XYZ{-1.664,-0.979,-1.888},
			XYZ{-1.902,-0.433,-1.867},
			XYZ{-1.964,0.160,-1.846},
			XYZ{-1.846,0.745,-1.825},
			XYZ{-1.559,1.268,-1.804},
			XYZ{-1.131,1.683,-1.782},
			XYZ{-0.601,1.956,-1.761},
			XYZ{-0.015,2.064,-1.740},
			XYZ{0.578,2.000,-1.719},
			XYZ{1.129,1.770,-1.698},
			XYZ{1.592,1.394,-1.677},
			XYZ{1.932,0.904,-1.656},
			XYZ{2.122,0.339,-1.635},
			XYZ{2.149,-0.257,-1.614},
			XYZ{2.013,-0.838,-1.593},
			XYZ{1.724,-1.360,-1.571},
			XYZ{1.305,-1.784,-1.550},
			XYZ{0.788,-2.081,-1.529},
			XYZ{0.210,-2.230,-1.508},
			XYZ{-0.387,-2.220,-1.487},
			XYZ{-0.960,-2.054,-1.466},
			XYZ{-1.470,-1.744,-1.445},
			XYZ{-1.881,-1.313,-1.424},
			XYZ{-2.168,-0.789,-1.403},
			XYZ{-2.310,-0.210,-1.382},
			XYZ{-2.300,0.387,-1.361},
			XYZ{-2.138,0.961,-1.339},
			XYZ{-1.837,1.476,-1.318},
			XYZ{-1.415,1.899,-1.297},
			XYZ{-0.901,2.202,-1.276},
			XYZ{-0.328,2.368,-1.255},
			XYZ{0.268,2.386,-1.234},
			XYZ{0.851,2.257,-1.213},
			XYZ{1.384,1.989,-1.192},
			XYZ{1.835,1.598,-1.171},
			XYZ{2.177,1.109,-1.150},
			XYZ{2.390,0.551,-1.129},
			XYZ{2.462,-0.041,-1.107},
			XYZ{2.389,-0.633,-1.086},
			XYZ{2.176,-1.191,-1.065},
			XYZ{1.836,-1.682,-1.044},
			XYZ{1.389,-2.077,-1.023},
			XYZ{0.861,-2.355,-1.002},
			XYZ{0.282,-2.500,-0.981},
			XYZ{-0.315,-2.504,-0.960},
			XYZ{-0.896,-2.368,-0.939},
			XYZ{-1.429,-2.099,-0.918},
			XYZ{-1.884,-1.713,-0.896},
			XYZ{-2.237,-1.232,-0.875},
			XYZ{-2.469,-0.682,-0.854},
			XYZ{-2.567,-0.093,-0.833},
			XYZ{-2.525,0.502,-0.812},
			XYZ{-2.348,1.072,-0.791},
			XYZ{-2.045,1.586,-0.770},
			XYZ{-1.631,2.017,-0.749},
			XYZ{-1.130,2.341,-0.728},
			XYZ{-0.569,2.543,-0.707},
			XYZ{0.024,2.611,-0.686},
			XYZ{0.617,2.543,-0.664},
			XYZ{1.179,2.342,-0.643},
			XYZ{1.681,2.019,-0.622},
			XYZ{2.097,1.591,-0.601},
			XYZ{2.406,1.080,-0.580},
			XYZ{2.591,0.512,-0.559},
			XYZ{2.645,-0.082,-0.538},
			XYZ{2.563,-0.674,-0.517},
			XYZ{2.351,-1.232,-0.496},
			XYZ{2.020,-1.728,-0.475},
			XYZ{1.585,-2.138,-0.454},
			XYZ{1.071,-2.441,-0.432},
			XYZ{0.502,-2.621,-0.411},
			XYZ{-0.093,-2.670,-0.390},
			XYZ{-0.684,-2.586,-0.369},
			XYZ{-1.242,-2.372,-0.348},
			XYZ{-1.738,-2.040,-0.327},
			XYZ{-2.148,-1.607,-0.306},
			XYZ{-2.452,-1.093,-0.285},
			XYZ{-2.635,-0.525,-0.264},
			XYZ{-2.688,0.070,-0.243},
			XYZ{-2.608,0.661,-0.221},
			XYZ{-2.400,1.221,-0.200},
			XYZ{-2.073,1.720,-0.179},
			XYZ{-1.644,2.136,-0.158},
			XYZ{-1.135,2.446,-0.137},
			XYZ{-0.569,2.637,-0.116},
			XYZ{0.025,2.698,-0.095},
			XYZ{0.618,2.627,-0.074},
			XYZ{1.180,2.428,-0.053},
			XYZ{1.685,2.109,-0.032},
			XYZ{2.108,1.687,-0.011},
			XYZ{2.427,1.183,0.011},
			XYZ{2.627,0.621,0.032},
			XYZ{2.699,0.028,0.053},
			XYZ{2.639,-0.566,0.074},
			XYZ{2.449,-1.132,0.095},
			XYZ{2.140,-1.642,0.116},
			XYZ{1.726,-2.072,0.137},
			XYZ{1.227,-2.400,0.158},
			XYZ{0.668,-2.610,0.179},
			XYZ{0.076,-2.691,0.200},
			XYZ{-0.518,-2.641,0.221},
			XYZ{-1.087,-2.459,0.243},
			XYZ{-1.602,-2.157,0.264},
			XYZ{-2.037,-1.749,0.285},
			XYZ{-2.371,-1.254,0.306},
			XYZ{-2.588,-0.698,0.327},
			XYZ{-2.675,-0.107,0.348},
			XYZ{-2.630,0.488,0.369},
			XYZ{-2.453,1.058,0.390},
			XYZ{-2.154,1.575,0.411},
			XYZ{-1.748,2.012,0.432},
			XYZ{-1.254,2.348,0.454},
			XYZ{-0.698,2.565,0.475},
			XYZ{-0.107,2.652,0.496},
			XYZ{0.488,2.605,0.517},
			XYZ{1.057,2.425,0.538},
			XYZ{1.572,2.123,0.559},
			XYZ{2.005,1.713,0.580},
			XYZ{2.335,1.215,0.601},
			XYZ{2.544,0.656,0.622},
			XYZ{2.621,0.064,0.643},
			XYZ{2.563,-0.530,0.664},
			XYZ{2.371,-1.095,0.686},
			XYZ{2.055,-1.602,0.707},
			XYZ{1.633,-2.024,0.728},
			XYZ{1.125,-2.337,0.749},
			XYZ{0.559,-2.527,0.770},
			XYZ{-0.036,-2.581,0.791},
			XYZ{-0.627,-2.498,0.812},
			XYZ{-1.182,-2.280,0.833},
			XYZ{-1.673,-1.940,0.854},
			XYZ{-2.071,-1.495,0.875},
			XYZ{-2.355,-0.970,0.896},
			XYZ{-2.509,-0.393,0.918},
			XYZ{-2.523,0.203,0.939},
			XYZ{-2.398,0.787,0.960},
			XYZ{-2.139,1.324,0.981},
			XYZ{-1.760,1.786,1.002},
			XYZ{-1.283,2.144,1.023},
			XYZ{-0.734,2.379,1.044},
			XYZ{-0.145,2.477,1.065},
			XYZ{0.450,2.431,1.086},
			XYZ{1.016,2.243,1.107},
			XYZ{1.521,1.924,1.129},
			XYZ{1.934,1.493,1.150},
			XYZ{2.229,0.975,1.171},
			XYZ{2.389,0.400,1.192},
			XYZ{2.404,-0.197,1.213},
			XYZ{2.272,-0.779,1.234},
			XYZ{2.000,-1.310,1.255},
			XYZ{1.605,-1.757,1.276},
			XYZ{1.111,-2.091,1.297},
			XYZ{0.548,-2.292,1.318},
			XYZ{-0.046,-2.344,1.339},
			XYZ{-0.634,-2.244,1.361},
			XYZ{-1.178,-1.998,1.382},
			XYZ{-1.641,-1.622,1.403},
			XYZ{-1.991,-1.139,1.424},
			XYZ{-2.205,-0.582,1.445},
			XYZ{-2.267,0.011,1.466},
			XYZ{-2.172,0.600,1.487},
			XYZ{-1.925,1.144,1.508},
			XYZ{-1.544,1.602,1.529},
			XYZ{-1.054,1.943,1.550},
			XYZ{-0.491,2.140,1.571},
			XYZ{0.104,2.178,1.593},
			XYZ{0.687,2.053,1.614},
			XYZ{1.214,1.773,1.635},
			XYZ{1.644,1.359,1.656},
			XYZ{1.941,0.842,1.677},
			XYZ{2.083,0.263,1.698},
			XYZ{2.055,-0.333,1.719},
			XYZ{1.860,-0.896,1.740},
			XYZ{1.511,-1.380,1.761},
			XYZ{1.037,-1.743,1.782},
			XYZ{0.479,-1.951,1.804},
			XYZ{-0.117,-1.987,1.825},
			XYZ{-0.695,-1.844,1.846},
			XYZ{-1.205,-1.534,1.867},
			XYZ{-1.597,-1.085,1.888},
			XYZ{-1.832,-0.537,1.909},
			XYZ{-1.887,0.056,1.930},
			XYZ{-1.754,0.637,1.951},
			XYZ{-1.444,1.146,1.972},
			XYZ{-0.988,1.530,1.993},
			XYZ{-0.432,1.745,2.014},
			XYZ{0.163,1.766,2.036},
			XYZ{0.732,1.589,2.057},
			XYZ{1.208,1.230,2.078},
			XYZ{1.533,0.731,2.099},
			XYZ{1.665,0.150,2.120},
			XYZ{1.585,-0.440,2.141},
			XYZ{1.300,-0.962,2.162},
			XYZ{0.844,-1.346,2.183},
			XYZ{0.279,-1.534,2.204},
			XYZ{-0.315,-1.496,2.225},
			XYZ{-0.849,-1.234,2.246},
			XYZ{-1.238,-0.784,2.268},
			XYZ{-1.416,-0.217,2.289},
			XYZ{-1.347,0.374,2.310},
			XYZ{-1.039,0.882,2.331},
			XYZ{-0.543,1.210,2.352},
			XYZ{0.046,1.287,2.373},
			XYZ{0.607,1.091,2.394},
			XYZ{1.012,0.657,2.415},
			XYZ{1.161,0.083,2.436},
			XYZ{1.006,-0.490,2.457},
			XYZ{0.579,-0.901,2.479},
			XYZ{-0.001,-1.021,2.500},
			XYZ{-0.548,-0.797,2.521},
			XYZ{-0.861,-0.296,2.542},
			XYZ{-0.798,0.290,2.563},
			XYZ{-0.368,0.691,2.584},
			XYZ{0.218,0.675,2.605},
			XYZ{0.586,0.223,2.626},
			XYZ{0.417,-0.329,2.647},
			XYZ{-0.148,-0.385,2.668},
			XYZ{-0.192,0.141,2.689}};
}; // radis = 2.7 angstrom

bool expose(XYZ crd, string cid, int rid, vector<vector<AAConformer>> conformers, double expose_th, string obj2);
bool formhb(XYZ crd, string cid, int rid, vector<vector<AAConformer>> conformers, double hb_th, string obj2);

}

#endif /* SAMPLING_SCREEN_H_ */
